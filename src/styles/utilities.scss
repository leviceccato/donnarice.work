@use 'sass:math';
@use 'sass:map';
@use 'sass:string';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:color';

// Return the number without it's unit
@function strip-unit($number) {
    @return math.div($number, $number * 0 + 1);
}

// Simple string replace http://www.sassmeister.com/gist/1b4f2da5527830088e4d
@function string-replace($string, $search, $replace: '') {
    $index: string.index($string, $search);
    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + string-replace(string.slice($string, $index + string.length($search)), $search, $replace);
    }
    @return $string;
}

// Encode an SVG for use in CSS
$encoding-reference: (
    ('<', '%3C'),
    ('>', '%3E'),
    ('"', '\''),
    ('#', '%23'),
    ('&', '%26'),
);
@function svg-encode($svg) {
    @each $char, $encoded in $encoding-reference {
        $svg: string-replace($svg, $char, $encoded);
    }
    @return 'data:image/svg+xml,' + $svg;
}

// Define global breakpoints
$breakpoints: (
    xs: 320px,
    s: 560px,
    m: 768px,
    l: 1024px,
    xl: 1400px,
    2xl: 1680px,
); 

// Generic, mobile-first media query generator
@mixin media($breakpoint) {
    @media (min-width: #{map.get($breakpoints, $breakpoint)}) {
        @content;
    }
}

// Apply same value to multiple properties
@mixin props($props, $value) {
    @each $prop in $props {
        #{$prop}: $value;
    }
}

// Increase specificity by duplicating a selector
@mixin spec($selector, $count: 1) {
    $new-selector: '';
    @for $i from 1 through $count {
        $new-selector: $new-selector + $selector
    }
    #{$new-selector} {
        @content;
    }
}

// Generate a fluid value that will clamp between a min and max at the given breakpoints
@mixin fluid($props, $min-value, $max-value, $min-bp: 'xs', $max-bp: 'xl') {

    // Allow passing breakpoint key or a custom value
    $min-vw: if(map.has-key($breakpoints, $min-bp), map.get($breakpoints, $min-bp), $min-bp);
    $max-vw: if(map.has-key($breakpoints, $max-bp), map.get($breakpoints, $max-bp), $max-bp);

    // Calculate the clamped fluid value
    $slope: math.div(strip-unit($min-value) - strip-unit($max-value), strip-unit($min-vw) - strip-unit($max-vw));
    $base: strip-unit($max-value) - $slope * strip-unit($max-vw);
    $calc-value: calc(#{$base + math.unit($min-value)} + #{(100 * $slope) + string.unquote('vw')});

    // Assuming mobile first, set min value
    @include props($props, $min-value);

    // From min bp on, set clamped fluid value
    @media (min-width: $min-vw) {
        @include props($props, $calc-value);
    }

    // From max bp on, set max value
    @media (min-width: $max-vw) {
        @include props($props, $max-value);
    }
}

// For use with eased-gradient below
@function ease-in-out-quad($v) {
    @if $v < 0.5 {
        @return 2 * $v * $v;
    } @else {
        @return -1 + (4 - 2 * $v) * $v;
    }
}

// Create a gradient that has its stops eased to appear smoother
@function eased-gradient($options) {

    // Set default parameters
    $easing: if(map.has-key($options, 'easing'), map.get($options, 'easing'), ease-in-out-quad);
    $resolution: if(map.has-key($options, 'resolution'), map.get($options, 'resolution'), 10);
    $type: if(map.has-key($options, 'type'), map.get($options, 'type'), 'linear');
    $start-offset: if(map.has-key($options, 'start-offset'), map.get($options, 'start-offset'), 0);
    $end-offset: if(map.has-key($options, 'end-offset'), map.get($options, 'end-offset'), 0);
    // angle acts as position if type is 'radial'
    $angle: if(map.has-key($options, 'angle'), map.get($options, 'angle'), 'to right');

    $ramp: (1 - $end-offset) - $start-offset;
    $stops: ();

    // Create a list of interpolated stops
    @for $i from 0 through $resolution {
        $decimal: math.div($i, $resolution);
        $position: ($decimal * $ramp) + $start-offset; 
        $stop: color.mix(map.get($options, 'end-colour'), map.get($options, 'start-colour'), math.percentage(meta.call(meta.get-function(string.unquote($easing)), $decimal))) math.percentage($position);
        $stops: list.append($stops, $stop, comma); 
    }

    // Return the constructed gradient
    @if ($type == 'linear') {
        @return linear-gradient(string.unquote($angle), $stops);
    } @else if ($type == 'radial') {
        @return radial-gradient(string.unquote($angle), $stops);
    }
}